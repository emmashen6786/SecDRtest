"""
Django settings for SecDRtest project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'ayg=_e&8se5hgt8^ub+mcq7*&al4tx(!z$b*w3buy$(u&pvq3f'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'createData',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'SecDRtest.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'SecDRtest.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'createData',
        'USER': 'root',
        'PASSWORD': 'sss12345678',
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'TEST': {
            'NAME': 'auto_tests',
            'CHARSET': 'utf8',
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
LOGGING_PATH_SETTINGS = {
    'access': 'logs/secService.log',
    'error': 'logs/error.log',
    'db': 'logs/db.log',
}
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 禁用已经存在的logger实例
    # 日志文件的格式
    'formatters': {
        # 定义两个特殊的日志格式
        'verbose': {
            'format': '[%(asctime)s] [%(name)s] %(filename)s[line:%(lineno)d] %(levelname)s: %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'request_fmt': {
            'format': f'[%(asctime)s] [%(name)s] %(filename)s[line:%(lineno)d] %(levelname)s: %(message)s'
            f' [%(x_shuiguowei_app_id)s]',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    # 过滤器
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # 处理器，控制日志输出到哪里，console，file…
    # 一个logger可以有多个Handler
    'handlers': {
        # 专门用来记邮件日志
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },
        # 在终端打印
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'filters': ['require_debug_true'],
            'formatter': 'verbose',
        },
        # 默认的
        'default': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': LOGGING_PATH_SETTINGS['access'],  # 日志文件
            'maxBytes': 1024 * 1024 * 5,  # 日志大小 5M
            'filters': ['require_debug_true'],
            'backupCount': 1,  # 最多备份几个
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
        # 专门用来记错误日志
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': LOGGING_PATH_SETTINGS['error'],  # 日志文件
            'maxBytes': 1024 * 1024 * 5,
            'backupCount': 1,
            'filters': ['require_debug_true'],
            'formatter': 'verbose',
        },
        # 专门用来记数据库日志
        'database': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGGING_PATH_SETTINGS['db'],
            'maxBytes': 1024 * 1024 * 5,
            'backupCount': 1,
            'filters': ['require_debug_true'],
            'formatter': 'verbose',
        },
    },
    # 用户使用的直接接口，将日志传递给Handler
    'loggers': {
        # 名为 'django'开头的logger还单独处理
        'django': {
            'handlers': ['console', 'default'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['database'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console', 'default'],
            'level': 'INFO',
            'propagate': False,
        },
        'common': {
            'handlers': ['default'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'utils': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'gunicorn.access': {
            'level': 'DEBUG',
            'handlers': ['default'],
            'propagate': True,
        },
    },
}

SWAGGER_SETTINGS = {
    # 基础样式
    'SECURITY_DEFINITIONS': {
        "basic": {
            'type': 'basic'
        }
    },
    # 如果需要登录才能够查看接口文档, 登录的链接使用restframework自带的.
    'LOGIN_URL': 'rest_framework:login',
    'LOGOUT_URL': 'rest_framework:logout',
    # 'DOC_EXPANSION': None,
    'SHOW_REQUEST_HEADERS': True,  # 设置True可以显示request headers
    # 'USE_SESSION_AUTH': True,
    'DOC_EXPANSION': 'list',  # 列出所有的操作(仅仅是操作列表，无具体信息)
    'APIS_SORTER': 'alpha',  # 设置显示的API的排序方式
    'JSON_EDITOR': True,  # 能够有一个图像界面去编辑复杂的api内容
    'OPERATIONS_SORTER': 'alpha',  # 对每一个API的操作列表排序
    'VALIDATOR_URL': None,
    # 设置可以操作的HTTP方法当使用"try it out！"按钮的时候
    'SUPPORTED_SUBMIT_METHODS': [
        'get',
        'post',
        'put',
        'delete',
    ]
}
